Terminals unused in grammar

   TO
   TRUE
   FALSE
   NUMBER
   DFS
   BFS
   RETURN
   AND
   OR
   LE
   GE
   LESS
   GREATER
   EQ
   NE
   NOT
   MUL
   DIV
   SUM
   SUB
   ASSIGN
   IT
   OPEN_BRACKET
   CLOSE_BRACKET


Grammar

    0 $accept: init $end

    1 init: program

    2 program: %empty
    3        | program function

    4 function: type id OPEN_P opt_params CLOSE_P OPEN_BRACE statments CLOSE_BRACE

    5 opt_params: %empty
    6           | params

    7 params: declaration
    8       | params SEPARATOR declaration

    9 statments: %empty
   10          | statments statment

   11 statment: statment_prefix statment_end
   12         | statment_prefix dangling_if
   13         | statment_end
   14         | dangling_if

   15 statment_no_dangle: statment_prefix statment_end
   16                   | statment_end

   17 dangling_if: IF OPEN_P CLOSE_P statment

   18 statment_prefix: IF OPEN_P CLOSE_P statment_no_dangle ELSE
   19                | WHILE OPEN_P CLOSE_P
   20                | FOR OPEN_P END END CLOSE_P

   21 statment_end: OPEN_BRACE statments CLOSE_BRACE
   22             | READ END
   23             | WRITE END

   24 declaration: type id

   25 id: ID

   26 type: INT
   27     | BOOLEAN
   28     | FLOAT
   29     | GRAPH
   30     | VOID


Terminals, with rules where they appear

$end (0) 0
error (256)
IF (258) 17 18
ELSE (259) 18
FOR (260) 20
WHILE (261) 19
BOOLEAN (262) 27
INT (263) 26
FLOAT (264) 28
GRAPH (265) 29
VOID (266) 30
TO (267)
TRUE (268)
FALSE (269)
ID (270) 25
NUMBER (271)
READ (272) 22
WRITE (273) 23
DFS (274)
BFS (275)
RETURN (276)
AND (277)
OR (278)
LE (279)
GE (280)
LESS (281)
GREATER (282)
EQ (283)
NE (284)
NOT (285)
MUL (286)
DIV (287)
SUM (288)
SUB (289)
ASSIGN (290)
END (291) 20 22 23
OPEN_BRACE (292) 4 21
CLOSE_BRACE (293) 4 21
IT (294)
SEPARATOR (295) 8
OPEN_P (296) 4 17 18 19 20
CLOSE_P (297) 4 17 18 19 20
OPEN_BRACKET (298)
CLOSE_BRACKET (299)


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
init (46)
    on left: 1, on right: 0
program (47)
    on left: 2 3, on right: 1 3
function (48)
    on left: 4, on right: 3
opt_params (49)
    on left: 5 6, on right: 4
params (50)
    on left: 7 8, on right: 6 8
statments (51)
    on left: 9 10, on right: 4 10 21
statment (52)
    on left: 11 12 13 14, on right: 10 17
statment_no_dangle (53)
    on left: 15 16, on right: 18
dangling_if (54)
    on left: 17, on right: 12 14
statment_prefix (55)
    on left: 18 19 20, on right: 11 12 15
statment_end (56)
    on left: 21 22 23, on right: 11 13 15 16
declaration (57)
    on left: 24, on right: 7 8
id (58)
    on left: 25, on right: 4 24
type (59)
    on left: 26 27 28 29 30, on right: 4 24


State 0

    0 $accept: . init $end

    $default  reduce using rule 2 (program)

    init     go to state 1
    program  go to state 2


State 1

    0 $accept: init . $end

    $end  shift, and go to state 3


State 2

    1 init: program .
    3 program: program . function

    BOOLEAN  shift, and go to state 4
    INT      shift, and go to state 5
    FLOAT    shift, and go to state 6
    GRAPH    shift, and go to state 7
    VOID     shift, and go to state 8

    $default  reduce using rule 1 (init)

    function  go to state 9
    type      go to state 10


State 3

    0 $accept: init $end .

    $default  accept


State 4

   27 type: BOOLEAN .

    $default  reduce using rule 27 (type)


State 5

   26 type: INT .

    $default  reduce using rule 26 (type)


State 6

   28 type: FLOAT .

    $default  reduce using rule 28 (type)


State 7

   29 type: GRAPH .

    $default  reduce using rule 29 (type)


State 8

   30 type: VOID .

    $default  reduce using rule 30 (type)


State 9

    3 program: program function .

    $default  reduce using rule 3 (program)


State 10

    4 function: type . id OPEN_P opt_params CLOSE_P OPEN_BRACE statments CLOSE_BRACE

    ID  shift, and go to state 11

    id  go to state 12


State 11

   25 id: ID .

    $default  reduce using rule 25 (id)


State 12

    4 function: type id . OPEN_P opt_params CLOSE_P OPEN_BRACE statments CLOSE_BRACE

    OPEN_P  shift, and go to state 13


State 13

    4 function: type id OPEN_P . opt_params CLOSE_P OPEN_BRACE statments CLOSE_BRACE

    BOOLEAN  shift, and go to state 4
    INT      shift, and go to state 5
    FLOAT    shift, and go to state 6
    GRAPH    shift, and go to state 7
    VOID     shift, and go to state 8

    $default  reduce using rule 5 (opt_params)

    opt_params   go to state 14
    params       go to state 15
    declaration  go to state 16
    type         go to state 17


State 14

    4 function: type id OPEN_P opt_params . CLOSE_P OPEN_BRACE statments CLOSE_BRACE

    CLOSE_P  shift, and go to state 18


State 15

    6 opt_params: params .
    8 params: params . SEPARATOR declaration

    SEPARATOR  shift, and go to state 19

    $default  reduce using rule 6 (opt_params)


State 16

    7 params: declaration .

    $default  reduce using rule 7 (params)


State 17

   24 declaration: type . id

    ID  shift, and go to state 11

    id  go to state 20


State 18

    4 function: type id OPEN_P opt_params CLOSE_P . OPEN_BRACE statments CLOSE_BRACE

    OPEN_BRACE  shift, and go to state 21


State 19

    8 params: params SEPARATOR . declaration

    BOOLEAN  shift, and go to state 4
    INT      shift, and go to state 5
    FLOAT    shift, and go to state 6
    GRAPH    shift, and go to state 7
    VOID     shift, and go to state 8

    declaration  go to state 22
    type         go to state 17


State 20

   24 declaration: type id .

    $default  reduce using rule 24 (declaration)


State 21

    4 function: type id OPEN_P opt_params CLOSE_P OPEN_BRACE . statments CLOSE_BRACE

    $default  reduce using rule 9 (statments)

    statments  go to state 23


State 22

    8 params: params SEPARATOR declaration .

    $default  reduce using rule 8 (params)


State 23

    4 function: type id OPEN_P opt_params CLOSE_P OPEN_BRACE statments . CLOSE_BRACE
   10 statments: statments . statment

    IF           shift, and go to state 24
    FOR          shift, and go to state 25
    WHILE        shift, and go to state 26
    READ         shift, and go to state 27
    WRITE        shift, and go to state 28
    OPEN_BRACE   shift, and go to state 29
    CLOSE_BRACE  shift, and go to state 30

    statment         go to state 31
    dangling_if      go to state 32
    statment_prefix  go to state 33
    statment_end     go to state 34


State 24

   17 dangling_if: IF . OPEN_P CLOSE_P statment
   18 statment_prefix: IF . OPEN_P CLOSE_P statment_no_dangle ELSE

    OPEN_P  shift, and go to state 35


State 25

   20 statment_prefix: FOR . OPEN_P END END CLOSE_P

    OPEN_P  shift, and go to state 36


State 26

   19 statment_prefix: WHILE . OPEN_P CLOSE_P

    OPEN_P  shift, and go to state 37


State 27

   22 statment_end: READ . END

    END  shift, and go to state 38


State 28

   23 statment_end: WRITE . END

    END  shift, and go to state 39


State 29

   21 statment_end: OPEN_BRACE . statments CLOSE_BRACE

    $default  reduce using rule 9 (statments)

    statments  go to state 40


State 30

    4 function: type id OPEN_P opt_params CLOSE_P OPEN_BRACE statments CLOSE_BRACE .

    $default  reduce using rule 4 (function)


State 31

   10 statments: statments statment .

    $default  reduce using rule 10 (statments)


State 32

   14 statment: dangling_if .

    $default  reduce using rule 14 (statment)


State 33

   11 statment: statment_prefix . statment_end
   12         | statment_prefix . dangling_if

    IF          shift, and go to state 41
    READ        shift, and go to state 27
    WRITE       shift, and go to state 28
    OPEN_BRACE  shift, and go to state 29

    dangling_if   go to state 42
    statment_end  go to state 43


State 34

   13 statment: statment_end .

    $default  reduce using rule 13 (statment)


State 35

   17 dangling_if: IF OPEN_P . CLOSE_P statment
   18 statment_prefix: IF OPEN_P . CLOSE_P statment_no_dangle ELSE

    CLOSE_P  shift, and go to state 44


State 36

   20 statment_prefix: FOR OPEN_P . END END CLOSE_P

    END  shift, and go to state 45


State 37

   19 statment_prefix: WHILE OPEN_P . CLOSE_P

    CLOSE_P  shift, and go to state 46


State 38

   22 statment_end: READ END .

    $default  reduce using rule 22 (statment_end)


State 39

   23 statment_end: WRITE END .

    $default  reduce using rule 23 (statment_end)


State 40

   10 statments: statments . statment
   21 statment_end: OPEN_BRACE statments . CLOSE_BRACE

    IF           shift, and go to state 24
    FOR          shift, and go to state 25
    WHILE        shift, and go to state 26
    READ         shift, and go to state 27
    WRITE        shift, and go to state 28
    OPEN_BRACE   shift, and go to state 29
    CLOSE_BRACE  shift, and go to state 47

    statment         go to state 31
    dangling_if      go to state 32
    statment_prefix  go to state 33
    statment_end     go to state 34


State 41

   17 dangling_if: IF . OPEN_P CLOSE_P statment

    OPEN_P  shift, and go to state 48


State 42

   12 statment: statment_prefix dangling_if .

    $default  reduce using rule 12 (statment)


State 43

   11 statment: statment_prefix statment_end .

    $default  reduce using rule 11 (statment)


State 44

   17 dangling_if: IF OPEN_P CLOSE_P . statment
   18 statment_prefix: IF OPEN_P CLOSE_P . statment_no_dangle ELSE

    IF          shift, and go to state 24
    FOR         shift, and go to state 25
    WHILE       shift, and go to state 26
    READ        shift, and go to state 27
    WRITE       shift, and go to state 28
    OPEN_BRACE  shift, and go to state 29

    statment            go to state 49
    statment_no_dangle  go to state 50
    dangling_if         go to state 32
    statment_prefix     go to state 51
    statment_end        go to state 52


State 45

   20 statment_prefix: FOR OPEN_P END . END CLOSE_P

    END  shift, and go to state 53


State 46

   19 statment_prefix: WHILE OPEN_P CLOSE_P .

    $default  reduce using rule 19 (statment_prefix)


State 47

   21 statment_end: OPEN_BRACE statments CLOSE_BRACE .

    $default  reduce using rule 21 (statment_end)


State 48

   17 dangling_if: IF OPEN_P . CLOSE_P statment

    CLOSE_P  shift, and go to state 54


State 49

   17 dangling_if: IF OPEN_P CLOSE_P statment .

    $default  reduce using rule 17 (dangling_if)


State 50

   18 statment_prefix: IF OPEN_P CLOSE_P statment_no_dangle . ELSE

    ELSE  shift, and go to state 55


State 51

   11 statment: statment_prefix . statment_end
   12         | statment_prefix . dangling_if
   15 statment_no_dangle: statment_prefix . statment_end

    IF          shift, and go to state 41
    READ        shift, and go to state 27
    WRITE       shift, and go to state 28
    OPEN_BRACE  shift, and go to state 29

    dangling_if   go to state 42
    statment_end  go to state 56


State 52

   13 statment: statment_end .
   16 statment_no_dangle: statment_end .

    ELSE      reduce using rule 16 (statment_no_dangle)
    $default  reduce using rule 13 (statment)


State 53

   20 statment_prefix: FOR OPEN_P END END . CLOSE_P

    CLOSE_P  shift, and go to state 57


State 54

   17 dangling_if: IF OPEN_P CLOSE_P . statment

    IF          shift, and go to state 24
    FOR         shift, and go to state 25
    WHILE       shift, and go to state 26
    READ        shift, and go to state 27
    WRITE       shift, and go to state 28
    OPEN_BRACE  shift, and go to state 29

    statment         go to state 49
    dangling_if      go to state 32
    statment_prefix  go to state 33
    statment_end     go to state 34


State 55

   18 statment_prefix: IF OPEN_P CLOSE_P statment_no_dangle ELSE .

    $default  reduce using rule 18 (statment_prefix)


State 56

   11 statment: statment_prefix statment_end .
   15 statment_no_dangle: statment_prefix statment_end .

    ELSE      reduce using rule 15 (statment_no_dangle)
    $default  reduce using rule 11 (statment)


State 57

   20 statment_prefix: FOR OPEN_P END END CLOSE_P .

    $default  reduce using rule 20 (statment_prefix)
