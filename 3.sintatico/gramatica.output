Terminals unused in grammar

   TO
   TRUE
   FALSE
   NUMBER
   DFS
   BFS
   RETURN
   AND
   OR
   LE
   GE
   LESS
   GREATER
   EQ
   NE
   NOT
   MUL
   DIV
   SUM
   SUB
   IT
   OPEN_BRACKET
   CLOSE_BRACKET


Grammar

    0 $accept: init $end

    1 init: program

    2 program: %empty
    3        | program function

    4 function: type id OPEN_P opt_params CLOSE_P OPEN_BRACE statments CLOSE_BRACE

    5 opt_params: %empty
    6           | params

    7 params: declaration
    8       | params SEPARATOR declaration

    9 statments: %empty
   10          | statments statment

   11 statment: statment_prefix statment_end
   12         | statment_prefix dangling_if
   13         | statment_end
   14         | dangling_if

   15 statment_no_dangle: statment_prefix statment_end
   16                   | statment_end

   17 dangling_if: IF OPEN_P expr_assign CLOSE_P statment

   18 statment_prefix: IF OPEN_P expr_assign CLOSE_P statment_no_dangle ELSE
   19                | WHILE OPEN_P expr_assign CLOSE_P
   20                | FOR OPEN_P declaration_or_assign END expr_assign END expr_assign CLOSE_P

   21 statment_end: OPEN_BRACE statments CLOSE_BRACE
   22             | READ END
   23             | WRITE END
   24             | declaration_or_assign END

   25 expr_assign: id_or_access ASSIGN expr_relational
   26            | expr_relational

   27 expr_relational: factor

   28 factor: OPEN_P expr_assign CLOSE_P
   29       | id

   30 declaration_or_assign: declaration
   31                      | declaration ASSIGN expr_assign

   32 declaration: type id

   33 id_or_access: id

   34 id: ID

   35 type: INT
   36     | BOOLEAN
   37     | FLOAT
   38     | GRAPH
   39     | VOID


Terminals, with rules where they appear

$end (0) 0
error (256)
IF (258) 17 18
ELSE (259) 18
FOR (260) 20
WHILE (261) 19
BOOLEAN (262) 36
INT (263) 35
FLOAT (264) 37
GRAPH (265) 38
VOID (266) 39
TO (267)
TRUE (268)
FALSE (269)
ID (270) 34
NUMBER (271)
READ (272) 22
WRITE (273) 23
DFS (274)
BFS (275)
RETURN (276)
AND (277)
OR (278)
LE (279)
GE (280)
LESS (281)
GREATER (282)
EQ (283)
NE (284)
NOT (285)
MUL (286)
DIV (287)
SUM (288)
SUB (289)
ASSIGN (290) 25 31
END (291) 20 22 23 24
OPEN_BRACE (292) 4 21
CLOSE_BRACE (293) 4 21
IT (294)
SEPARATOR (295) 8
OPEN_P (296) 4 17 18 19 20 28
CLOSE_P (297) 4 17 18 19 20 28
OPEN_BRACKET (298)
CLOSE_BRACKET (299)


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
init (46)
    on left: 1, on right: 0
program (47)
    on left: 2 3, on right: 1 3
function (48)
    on left: 4, on right: 3
opt_params (49)
    on left: 5 6, on right: 4
params (50)
    on left: 7 8, on right: 6 8
statments (51)
    on left: 9 10, on right: 4 10 21
statment (52)
    on left: 11 12 13 14, on right: 10 17
statment_no_dangle (53)
    on left: 15 16, on right: 18
dangling_if (54)
    on left: 17, on right: 12 14
statment_prefix (55)
    on left: 18 19 20, on right: 11 12 15
statment_end (56)
    on left: 21 22 23 24, on right: 11 13 15 16
expr_assign (57)
    on left: 25 26, on right: 17 18 19 20 28 31
expr_relational (58)
    on left: 27, on right: 25 26
factor (59)
    on left: 28 29, on right: 27
declaration_or_assign (60)
    on left: 30 31, on right: 20 24
declaration (61)
    on left: 32, on right: 7 8 30 31
id_or_access (62)
    on left: 33, on right: 25
id (63)
    on left: 34, on right: 4 29 32 33
type (64)
    on left: 35 36 37 38 39, on right: 4 32


State 0

    0 $accept: . init $end

    $default  reduce using rule 2 (program)

    init     go to state 1
    program  go to state 2


State 1

    0 $accept: init . $end

    $end  shift, and go to state 3


State 2

    1 init: program .
    3 program: program . function

    BOOLEAN  shift, and go to state 4
    INT      shift, and go to state 5
    FLOAT    shift, and go to state 6
    GRAPH    shift, and go to state 7
    VOID     shift, and go to state 8

    $default  reduce using rule 1 (init)

    function  go to state 9
    type      go to state 10


State 3

    0 $accept: init $end .

    $default  accept


State 4

   36 type: BOOLEAN .

    $default  reduce using rule 36 (type)


State 5

   35 type: INT .

    $default  reduce using rule 35 (type)


State 6

   37 type: FLOAT .

    $default  reduce using rule 37 (type)


State 7

   38 type: GRAPH .

    $default  reduce using rule 38 (type)


State 8

   39 type: VOID .

    $default  reduce using rule 39 (type)


State 9

    3 program: program function .

    $default  reduce using rule 3 (program)


State 10

    4 function: type . id OPEN_P opt_params CLOSE_P OPEN_BRACE statments CLOSE_BRACE

    ID  shift, and go to state 11

    id  go to state 12


State 11

   34 id: ID .

    $default  reduce using rule 34 (id)


State 12

    4 function: type id . OPEN_P opt_params CLOSE_P OPEN_BRACE statments CLOSE_BRACE

    OPEN_P  shift, and go to state 13


State 13

    4 function: type id OPEN_P . opt_params CLOSE_P OPEN_BRACE statments CLOSE_BRACE

    BOOLEAN  shift, and go to state 4
    INT      shift, and go to state 5
    FLOAT    shift, and go to state 6
    GRAPH    shift, and go to state 7
    VOID     shift, and go to state 8

    $default  reduce using rule 5 (opt_params)

    opt_params   go to state 14
    params       go to state 15
    declaration  go to state 16
    type         go to state 17


State 14

    4 function: type id OPEN_P opt_params . CLOSE_P OPEN_BRACE statments CLOSE_BRACE

    CLOSE_P  shift, and go to state 18


State 15

    6 opt_params: params .
    8 params: params . SEPARATOR declaration

    SEPARATOR  shift, and go to state 19

    $default  reduce using rule 6 (opt_params)


State 16

    7 params: declaration .

    $default  reduce using rule 7 (params)


State 17

   32 declaration: type . id

    ID  shift, and go to state 11

    id  go to state 20


State 18

    4 function: type id OPEN_P opt_params CLOSE_P . OPEN_BRACE statments CLOSE_BRACE

    OPEN_BRACE  shift, and go to state 21


State 19

    8 params: params SEPARATOR . declaration

    BOOLEAN  shift, and go to state 4
    INT      shift, and go to state 5
    FLOAT    shift, and go to state 6
    GRAPH    shift, and go to state 7
    VOID     shift, and go to state 8

    declaration  go to state 22
    type         go to state 17


State 20

   32 declaration: type id .

    $default  reduce using rule 32 (declaration)


State 21

    4 function: type id OPEN_P opt_params CLOSE_P OPEN_BRACE . statments CLOSE_BRACE

    $default  reduce using rule 9 (statments)

    statments  go to state 23


State 22

    8 params: params SEPARATOR declaration .

    $default  reduce using rule 8 (params)


State 23

    4 function: type id OPEN_P opt_params CLOSE_P OPEN_BRACE statments . CLOSE_BRACE
   10 statments: statments . statment

    IF           shift, and go to state 24
    FOR          shift, and go to state 25
    WHILE        shift, and go to state 26
    BOOLEAN      shift, and go to state 4
    INT          shift, and go to state 5
    FLOAT        shift, and go to state 6
    GRAPH        shift, and go to state 7
    VOID         shift, and go to state 8
    READ         shift, and go to state 27
    WRITE        shift, and go to state 28
    OPEN_BRACE   shift, and go to state 29
    CLOSE_BRACE  shift, and go to state 30

    statment               go to state 31
    dangling_if            go to state 32
    statment_prefix        go to state 33
    statment_end           go to state 34
    declaration_or_assign  go to state 35
    declaration            go to state 36
    type                   go to state 17


State 24

   17 dangling_if: IF . OPEN_P expr_assign CLOSE_P statment
   18 statment_prefix: IF . OPEN_P expr_assign CLOSE_P statment_no_dangle ELSE

    OPEN_P  shift, and go to state 37


State 25

   20 statment_prefix: FOR . OPEN_P declaration_or_assign END expr_assign END expr_assign CLOSE_P

    OPEN_P  shift, and go to state 38


State 26

   19 statment_prefix: WHILE . OPEN_P expr_assign CLOSE_P

    OPEN_P  shift, and go to state 39


State 27

   22 statment_end: READ . END

    END  shift, and go to state 40


State 28

   23 statment_end: WRITE . END

    END  shift, and go to state 41


State 29

   21 statment_end: OPEN_BRACE . statments CLOSE_BRACE

    $default  reduce using rule 9 (statments)

    statments  go to state 42


State 30

    4 function: type id OPEN_P opt_params CLOSE_P OPEN_BRACE statments CLOSE_BRACE .

    $default  reduce using rule 4 (function)


State 31

   10 statments: statments statment .

    $default  reduce using rule 10 (statments)


State 32

   14 statment: dangling_if .

    $default  reduce using rule 14 (statment)


State 33

   11 statment: statment_prefix . statment_end
   12         | statment_prefix . dangling_if

    IF          shift, and go to state 43
    BOOLEAN     shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    GRAPH       shift, and go to state 7
    VOID        shift, and go to state 8
    READ        shift, and go to state 27
    WRITE       shift, and go to state 28
    OPEN_BRACE  shift, and go to state 29

    dangling_if            go to state 44
    statment_end           go to state 45
    declaration_or_assign  go to state 35
    declaration            go to state 36
    type                   go to state 17


State 34

   13 statment: statment_end .

    $default  reduce using rule 13 (statment)


State 35

   24 statment_end: declaration_or_assign . END

    END  shift, and go to state 46


State 36

   30 declaration_or_assign: declaration .
   31                      | declaration . ASSIGN expr_assign

    ASSIGN  shift, and go to state 47

    $default  reduce using rule 30 (declaration_or_assign)


State 37

   17 dangling_if: IF OPEN_P . expr_assign CLOSE_P statment
   18 statment_prefix: IF OPEN_P . expr_assign CLOSE_P statment_no_dangle ELSE

    ID      shift, and go to state 11
    OPEN_P  shift, and go to state 48

    expr_assign      go to state 49
    expr_relational  go to state 50
    factor           go to state 51
    id_or_access     go to state 52
    id               go to state 53


State 38

   20 statment_prefix: FOR OPEN_P . declaration_or_assign END expr_assign END expr_assign CLOSE_P

    BOOLEAN  shift, and go to state 4
    INT      shift, and go to state 5
    FLOAT    shift, and go to state 6
    GRAPH    shift, and go to state 7
    VOID     shift, and go to state 8

    declaration_or_assign  go to state 54
    declaration            go to state 36
    type                   go to state 17


State 39

   19 statment_prefix: WHILE OPEN_P . expr_assign CLOSE_P

    ID      shift, and go to state 11
    OPEN_P  shift, and go to state 48

    expr_assign      go to state 55
    expr_relational  go to state 50
    factor           go to state 51
    id_or_access     go to state 52
    id               go to state 53


State 40

   22 statment_end: READ END .

    $default  reduce using rule 22 (statment_end)


State 41

   23 statment_end: WRITE END .

    $default  reduce using rule 23 (statment_end)


State 42

   10 statments: statments . statment
   21 statment_end: OPEN_BRACE statments . CLOSE_BRACE

    IF           shift, and go to state 24
    FOR          shift, and go to state 25
    WHILE        shift, and go to state 26
    BOOLEAN      shift, and go to state 4
    INT          shift, and go to state 5
    FLOAT        shift, and go to state 6
    GRAPH        shift, and go to state 7
    VOID         shift, and go to state 8
    READ         shift, and go to state 27
    WRITE        shift, and go to state 28
    OPEN_BRACE   shift, and go to state 29
    CLOSE_BRACE  shift, and go to state 56

    statment               go to state 31
    dangling_if            go to state 32
    statment_prefix        go to state 33
    statment_end           go to state 34
    declaration_or_assign  go to state 35
    declaration            go to state 36
    type                   go to state 17


State 43

   17 dangling_if: IF . OPEN_P expr_assign CLOSE_P statment

    OPEN_P  shift, and go to state 57


State 44

   12 statment: statment_prefix dangling_if .

    $default  reduce using rule 12 (statment)


State 45

   11 statment: statment_prefix statment_end .

    $default  reduce using rule 11 (statment)


State 46

   24 statment_end: declaration_or_assign END .

    $default  reduce using rule 24 (statment_end)


State 47

   31 declaration_or_assign: declaration ASSIGN . expr_assign

    ID      shift, and go to state 11
    OPEN_P  shift, and go to state 48

    expr_assign      go to state 58
    expr_relational  go to state 50
    factor           go to state 51
    id_or_access     go to state 52
    id               go to state 53


State 48

   28 factor: OPEN_P . expr_assign CLOSE_P

    ID      shift, and go to state 11
    OPEN_P  shift, and go to state 48

    expr_assign      go to state 59
    expr_relational  go to state 50
    factor           go to state 51
    id_or_access     go to state 52
    id               go to state 53


State 49

   17 dangling_if: IF OPEN_P expr_assign . CLOSE_P statment
   18 statment_prefix: IF OPEN_P expr_assign . CLOSE_P statment_no_dangle ELSE

    CLOSE_P  shift, and go to state 60


State 50

   26 expr_assign: expr_relational .

    $default  reduce using rule 26 (expr_assign)


State 51

   27 expr_relational: factor .

    $default  reduce using rule 27 (expr_relational)


State 52

   25 expr_assign: id_or_access . ASSIGN expr_relational

    ASSIGN  shift, and go to state 61


State 53

   29 factor: id .
   33 id_or_access: id .

    ASSIGN    reduce using rule 33 (id_or_access)
    $default  reduce using rule 29 (factor)


State 54

   20 statment_prefix: FOR OPEN_P declaration_or_assign . END expr_assign END expr_assign CLOSE_P

    END  shift, and go to state 62


State 55

   19 statment_prefix: WHILE OPEN_P expr_assign . CLOSE_P

    CLOSE_P  shift, and go to state 63


State 56

   21 statment_end: OPEN_BRACE statments CLOSE_BRACE .

    $default  reduce using rule 21 (statment_end)


State 57

   17 dangling_if: IF OPEN_P . expr_assign CLOSE_P statment

    ID      shift, and go to state 11
    OPEN_P  shift, and go to state 48

    expr_assign      go to state 64
    expr_relational  go to state 50
    factor           go to state 51
    id_or_access     go to state 52
    id               go to state 53


State 58

   31 declaration_or_assign: declaration ASSIGN expr_assign .

    $default  reduce using rule 31 (declaration_or_assign)


State 59

   28 factor: OPEN_P expr_assign . CLOSE_P

    CLOSE_P  shift, and go to state 65


State 60

   17 dangling_if: IF OPEN_P expr_assign CLOSE_P . statment
   18 statment_prefix: IF OPEN_P expr_assign CLOSE_P . statment_no_dangle ELSE

    IF          shift, and go to state 24
    FOR         shift, and go to state 25
    WHILE       shift, and go to state 26
    BOOLEAN     shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    GRAPH       shift, and go to state 7
    VOID        shift, and go to state 8
    READ        shift, and go to state 27
    WRITE       shift, and go to state 28
    OPEN_BRACE  shift, and go to state 29

    statment               go to state 66
    statment_no_dangle     go to state 67
    dangling_if            go to state 32
    statment_prefix        go to state 68
    statment_end           go to state 69
    declaration_or_assign  go to state 35
    declaration            go to state 36
    type                   go to state 17


State 61

   25 expr_assign: id_or_access ASSIGN . expr_relational

    ID      shift, and go to state 11
    OPEN_P  shift, and go to state 48

    expr_relational  go to state 70
    factor           go to state 51
    id               go to state 71


State 62

   20 statment_prefix: FOR OPEN_P declaration_or_assign END . expr_assign END expr_assign CLOSE_P

    ID      shift, and go to state 11
    OPEN_P  shift, and go to state 48

    expr_assign      go to state 72
    expr_relational  go to state 50
    factor           go to state 51
    id_or_access     go to state 52
    id               go to state 53


State 63

   19 statment_prefix: WHILE OPEN_P expr_assign CLOSE_P .

    $default  reduce using rule 19 (statment_prefix)


State 64

   17 dangling_if: IF OPEN_P expr_assign . CLOSE_P statment

    CLOSE_P  shift, and go to state 73


State 65

   28 factor: OPEN_P expr_assign CLOSE_P .

    $default  reduce using rule 28 (factor)


State 66

   17 dangling_if: IF OPEN_P expr_assign CLOSE_P statment .

    $default  reduce using rule 17 (dangling_if)


State 67

   18 statment_prefix: IF OPEN_P expr_assign CLOSE_P statment_no_dangle . ELSE

    ELSE  shift, and go to state 74


State 68

   11 statment: statment_prefix . statment_end
   12         | statment_prefix . dangling_if
   15 statment_no_dangle: statment_prefix . statment_end

    IF          shift, and go to state 43
    BOOLEAN     shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    GRAPH       shift, and go to state 7
    VOID        shift, and go to state 8
    READ        shift, and go to state 27
    WRITE       shift, and go to state 28
    OPEN_BRACE  shift, and go to state 29

    dangling_if            go to state 44
    statment_end           go to state 75
    declaration_or_assign  go to state 35
    declaration            go to state 36
    type                   go to state 17


State 69

   13 statment: statment_end .
   16 statment_no_dangle: statment_end .

    ELSE      reduce using rule 16 (statment_no_dangle)
    $default  reduce using rule 13 (statment)


State 70

   25 expr_assign: id_or_access ASSIGN expr_relational .

    $default  reduce using rule 25 (expr_assign)


State 71

   29 factor: id .

    $default  reduce using rule 29 (factor)


State 72

   20 statment_prefix: FOR OPEN_P declaration_or_assign END expr_assign . END expr_assign CLOSE_P

    END  shift, and go to state 76


State 73

   17 dangling_if: IF OPEN_P expr_assign CLOSE_P . statment

    IF          shift, and go to state 24
    FOR         shift, and go to state 25
    WHILE       shift, and go to state 26
    BOOLEAN     shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    GRAPH       shift, and go to state 7
    VOID        shift, and go to state 8
    READ        shift, and go to state 27
    WRITE       shift, and go to state 28
    OPEN_BRACE  shift, and go to state 29

    statment               go to state 66
    dangling_if            go to state 32
    statment_prefix        go to state 33
    statment_end           go to state 34
    declaration_or_assign  go to state 35
    declaration            go to state 36
    type                   go to state 17


State 74

   18 statment_prefix: IF OPEN_P expr_assign CLOSE_P statment_no_dangle ELSE .

    $default  reduce using rule 18 (statment_prefix)


State 75

   11 statment: statment_prefix statment_end .
   15 statment_no_dangle: statment_prefix statment_end .

    ELSE      reduce using rule 15 (statment_no_dangle)
    $default  reduce using rule 11 (statment)


State 76

   20 statment_prefix: FOR OPEN_P declaration_or_assign END expr_assign END . expr_assign CLOSE_P

    ID      shift, and go to state 11
    OPEN_P  shift, and go to state 48

    expr_assign      go to state 77
    expr_relational  go to state 50
    factor           go to state 51
    id_or_access     go to state 52
    id               go to state 53


State 77

   20 statment_prefix: FOR OPEN_P declaration_or_assign END expr_assign END expr_assign . CLOSE_P

    CLOSE_P  shift, and go to state 78


State 78

   20 statment_prefix: FOR OPEN_P declaration_or_assign END expr_assign END expr_assign CLOSE_P .

    $default  reduce using rule 20 (statment_prefix)
