Grammar

    0 $accept: init $end

    1 init: program

    2 program: %empty
    3        | program function

    4 $@1: %empty

    5 $@2: %empty

    6 function: type dimension id $@1 OPEN_P params CLOSE_P $@2 OPEN_BRACE statements CLOSE_BRACE
    7         | error

    8 params: %empty
    9       | params SEPARATOR declaration
   10       | declaration

   11 function_call: id OPEN_P params_call CLOSE_P

   12 params_call: %empty
   13            | params_call SEPARATOR expr_assign
   14            | expr_assign

   15 graph_call: DFS graph_params_call
   16           | BFS graph_params_call

   17 graph_params_call: OPEN_P id_or_access SEPARATOR expr_assign SEPARATOR expr_assign CLOSE_P

   18 statements: %empty
   19           | statements statement

   20 $@3: %empty

   21 block: OPEN_BRACE $@3 statements CLOSE_BRACE

   22 statement_control: block
   23                  | IF OPEN_P expr_assign CLOSE_P block
   24                  | IF OPEN_P expr_assign CLOSE_P block ELSE statement_control

   25 statement: WHILE OPEN_P expr_assign CLOSE_P block
   26          | FOR OPEN_P expr_assign END expr_assign END expr_assign CLOSE_P block
   27          | FOR OPEN_P id_or_access IT graph_call CLOSE_P block
   28          | READ id_or_access END
   29          | WRITE expr_assign END
   30          | declaration END
   31          | expr_assign END
   32          | graph_add END
   33          | RETURN expr_assign END
   34          | statement_control

   35 expr_assign: expr_relational ASSIGN expr_assign
   36            | expr_relational

   37 expr_relational: expr_relational compare_op expr_or
   38                | expr_or

   39 expr_or: expr_or or expr_and
   40        | expr_and

   41 expr_and: expr_and and expr_add
   42         | expr_add

   43 expr_add: expr_add add expr_sub
   44         | expr_sub

   45 expr_sub: expr_sub sub expr_mul
   46         | expr_mul

   47 expr_mul: expr_mul mul expr_div
   48         | expr_div

   49 expr_div: expr_div div expr_unary
   50         | expr_unary

   51 expr_unary: unary factor
   52           | factor

   53 factor: OPEN_P expr_assign CLOSE_P
   54       | value

   55 unary: NOT
   56      | add
   57      | sub

   58 and: AND

   59 or: OR

   60 add: ADD

   61 sub: SUB

   62 mul: MUL

   63 div: DIV

   64 compare_op: LE
   65           | GE
   66           | LESS
   67           | GREATER
   68           | EQ
   69           | NE

   70 graph_add: ADDV OPEN_P id_or_access CLOSE_P
   71          | ADDA OPEN_P id_or_access SEPARATOR expr_assign SEPARATOR expr_assign CLOSE_P

   72 declaration: type dimension id

   73 dimension: %empty
   74          | OPEN_BRACKET number_int CLOSE_BRACKET

   75 value: id_or_access
   76      | number
   77      | boolean_const
   78      | function_call

   79 id_or_access: id access_lvl

   80 access_lvl: %empty
   81           | OPEN_BRACKET expr_assign CLOSE_BRACKET access_lvl

   82 id: ID

   83 type: INT
   84     | BOOLEAN
   85     | FLOAT
   86     | GRAPH
   87     | VOID

   88 number: number_int
   89       | number_float

   90 number_int: C_INT

   91 number_float: C_FLOAT

   92 boolean_const: TRUE
   93              | FALSE


Terminals, with rules where they appear

$end (0) 0
error (256) 7
IF (258) 23 24
ELSE (259) 24
FOR (260) 26 27
WHILE (261) 25
BOOLEAN (262) 84
INT (263) 83
FLOAT (264) 85
GRAPH (265) 86
VOID (266) 87
TRUE (267) 92
FALSE (268) 93
ID (269) 82
C_FLOAT (270) 91
C_INT (271) 90
READ (272) 28
WRITE (273) 29
DFS (274) 15
BFS (275) 16
ADDA (276) 71
ADDV (277) 70
RETURN (278) 33
AND (279) 58
OR (280) 59
LE (281) 64
GE (282) 65
LESS (283) 66
GREATER (284) 67
EQ (285) 68
NE (286) 69
NOT (287) 55
MUL (288) 62
DIV (289) 63
ADD (290) 60
SUB (291) 61
ASSIGN (292) 35
END (293) 26 28 29 30 31 32 33
OPEN_BRACE (294) 6 21
CLOSE_BRACE (295) 6 21
IT (296) 27
SEPARATOR (297) 9 13 17 71
OPEN_P (298) 6 11 17 23 24 25 26 27 53 70 71
CLOSE_P (299) 6 11 17 23 24 25 26 27 53 70 71
OPEN_BRACKET (300) 74 81
CLOSE_BRACKET (301) 74 81


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
init (48)
    on left: 1, on right: 0
program (49)
    on left: 2 3, on right: 1 3
function (50)
    on left: 6 7, on right: 3
$@1 (51)
    on left: 4, on right: 6
$@2 (52)
    on left: 5, on right: 6
params (53)
    on left: 8 9 10, on right: 6 9
function_call (54)
    on left: 11, on right: 78
params_call (55)
    on left: 12 13 14, on right: 11 13
graph_call (56)
    on left: 15 16, on right: 27
graph_params_call (57)
    on left: 17, on right: 15 16
statements (58)
    on left: 18 19, on right: 6 19 21
block (59)
    on left: 21, on right: 22 23 24 25 26 27
$@3 (60)
    on left: 20, on right: 21
statement_control (61)
    on left: 22 23 24, on right: 24 34
statement (62)
    on left: 25 26 27 28 29 30 31 32 33 34, on right: 19
expr_assign (63)
    on left: 35 36, on right: 13 14 17 23 24 25 26 29 31 33 35 53 71
    81
expr_relational (64)
    on left: 37 38, on right: 35 36 37
expr_or (65)
    on left: 39 40, on right: 37 38 39
expr_and (66)
    on left: 41 42, on right: 39 40 41
expr_add (67)
    on left: 43 44, on right: 41 42 43
expr_sub (68)
    on left: 45 46, on right: 43 44 45
expr_mul (69)
    on left: 47 48, on right: 45 46 47
expr_div (70)
    on left: 49 50, on right: 47 48 49
expr_unary (71)
    on left: 51 52, on right: 49 50
factor (72)
    on left: 53 54, on right: 51 52
unary (73)
    on left: 55 56 57, on right: 51
and (74)
    on left: 58, on right: 41
or (75)
    on left: 59, on right: 39
add (76)
    on left: 60, on right: 43 56
sub (77)
    on left: 61, on right: 45 57
mul (78)
    on left: 62, on right: 47
div (79)
    on left: 63, on right: 49
compare_op (80)
    on left: 64 65 66 67 68 69, on right: 37
graph_add (81)
    on left: 70 71, on right: 32
declaration (82)
    on left: 72, on right: 9 10 30
dimension (83)
    on left: 73 74, on right: 6 72
value (84)
    on left: 75 76 77 78, on right: 54
id_or_access (85)
    on left: 79, on right: 17 27 28 70 71 75
access_lvl (86)
    on left: 80 81, on right: 79 81
id (87)
    on left: 82, on right: 6 11 72 79
type (88)
    on left: 83 84 85 86 87, on right: 6 72
number (89)
    on left: 88 89, on right: 76
number_int (90)
    on left: 90, on right: 74 88
number_float (91)
    on left: 91, on right: 89
boolean_const (92)
    on left: 92 93, on right: 77


State 0

    0 $accept: . init $end

    $default  reduce using rule 2 (program)

    init     go to state 1
    program  go to state 2


State 1

    0 $accept: init . $end

    $end  shift, and go to state 3


State 2

    1 init: program .
    3 program: program . function

    error    shift, and go to state 4
    BOOLEAN  shift, and go to state 5
    INT      shift, and go to state 6
    FLOAT    shift, and go to state 7
    GRAPH    shift, and go to state 8
    VOID     shift, and go to state 9

    $end  reduce using rule 1 (init)

    function  go to state 10
    type      go to state 11


State 3

    0 $accept: init $end .

    $default  accept


State 4

    7 function: error .

    $default  reduce using rule 7 (function)


State 5

   84 type: BOOLEAN .

    $default  reduce using rule 84 (type)


State 6

   83 type: INT .

    $default  reduce using rule 83 (type)


State 7

   85 type: FLOAT .

    $default  reduce using rule 85 (type)


State 8

   86 type: GRAPH .

    $default  reduce using rule 86 (type)


State 9

   87 type: VOID .

    $default  reduce using rule 87 (type)


State 10

    3 program: program function .

    $default  reduce using rule 3 (program)


State 11

    6 function: type . dimension id $@1 OPEN_P params CLOSE_P $@2 OPEN_BRACE statements CLOSE_BRACE

    OPEN_BRACKET  shift, and go to state 12

    $default  reduce using rule 73 (dimension)

    dimension  go to state 13


State 12

   74 dimension: OPEN_BRACKET . number_int CLOSE_BRACKET

    C_INT  shift, and go to state 14

    number_int  go to state 15


State 13

    6 function: type dimension . id $@1 OPEN_P params CLOSE_P $@2 OPEN_BRACE statements CLOSE_BRACE

    ID  shift, and go to state 16

    id  go to state 17


State 14

   90 number_int: C_INT .

    $default  reduce using rule 90 (number_int)


State 15

   74 dimension: OPEN_BRACKET number_int . CLOSE_BRACKET

    CLOSE_BRACKET  shift, and go to state 18


State 16

   82 id: ID .

    $default  reduce using rule 82 (id)


State 17

    6 function: type dimension id . $@1 OPEN_P params CLOSE_P $@2 OPEN_BRACE statements CLOSE_BRACE

    $default  reduce using rule 4 ($@1)

    $@1  go to state 19


State 18

   74 dimension: OPEN_BRACKET number_int CLOSE_BRACKET .

    $default  reduce using rule 74 (dimension)


State 19

    6 function: type dimension id $@1 . OPEN_P params CLOSE_P $@2 OPEN_BRACE statements CLOSE_BRACE

    OPEN_P  shift, and go to state 20


State 20

    6 function: type dimension id $@1 OPEN_P . params CLOSE_P $@2 OPEN_BRACE statements CLOSE_BRACE

    BOOLEAN  shift, and go to state 5
    INT      shift, and go to state 6
    FLOAT    shift, and go to state 7
    GRAPH    shift, and go to state 8
    VOID     shift, and go to state 9

    $default  reduce using rule 8 (params)

    params       go to state 21
    declaration  go to state 22
    type         go to state 23


State 21

    6 function: type dimension id $@1 OPEN_P params . CLOSE_P $@2 OPEN_BRACE statements CLOSE_BRACE
    9 params: params . SEPARATOR declaration

    SEPARATOR  shift, and go to state 24
    CLOSE_P    shift, and go to state 25


State 22

   10 params: declaration .

    $default  reduce using rule 10 (params)


State 23

   72 declaration: type . dimension id

    OPEN_BRACKET  shift, and go to state 12

    $default  reduce using rule 73 (dimension)

    dimension  go to state 26


State 24

    9 params: params SEPARATOR . declaration

    BOOLEAN  shift, and go to state 5
    INT      shift, and go to state 6
    FLOAT    shift, and go to state 7
    GRAPH    shift, and go to state 8
    VOID     shift, and go to state 9

    declaration  go to state 27
    type         go to state 23


State 25

    6 function: type dimension id $@1 OPEN_P params CLOSE_P . $@2 OPEN_BRACE statements CLOSE_BRACE

    $default  reduce using rule 5 ($@2)

    $@2  go to state 28


State 26

   72 declaration: type dimension . id

    ID  shift, and go to state 16

    id  go to state 29


State 27

    9 params: params SEPARATOR declaration .

    $default  reduce using rule 9 (params)


State 28

    6 function: type dimension id $@1 OPEN_P params CLOSE_P $@2 . OPEN_BRACE statements CLOSE_BRACE

    OPEN_BRACE  shift, and go to state 30


State 29

   72 declaration: type dimension id .

    $default  reduce using rule 72 (declaration)


State 30

    6 function: type dimension id $@1 OPEN_P params CLOSE_P $@2 OPEN_BRACE . statements CLOSE_BRACE

    $default  reduce using rule 18 (statements)

    statements  go to state 31


State 31

    6 function: type dimension id $@1 OPEN_P params CLOSE_P $@2 OPEN_BRACE statements . CLOSE_BRACE
   19 statements: statements . statement

    IF           shift, and go to state 32
    FOR          shift, and go to state 33
    WHILE        shift, and go to state 34
    BOOLEAN      shift, and go to state 5
    INT          shift, and go to state 6
    FLOAT        shift, and go to state 7
    GRAPH        shift, and go to state 8
    VOID         shift, and go to state 9
    TRUE         shift, and go to state 35
    FALSE        shift, and go to state 36
    ID           shift, and go to state 16
    C_FLOAT      shift, and go to state 37
    C_INT        shift, and go to state 14
    READ         shift, and go to state 38
    WRITE        shift, and go to state 39
    ADDA         shift, and go to state 40
    ADDV         shift, and go to state 41
    RETURN       shift, and go to state 42
    NOT          shift, and go to state 43
    ADD          shift, and go to state 44
    SUB          shift, and go to state 45
    OPEN_BRACE   shift, and go to state 46
    CLOSE_BRACE  shift, and go to state 47
    OPEN_P       shift, and go to state 48

    function_call      go to state 49
    block              go to state 50
    statement_control  go to state 51
    statement          go to state 52
    expr_assign        go to state 53
    expr_relational    go to state 54
    expr_or            go to state 55
    expr_and           go to state 56
    expr_add           go to state 57
    expr_sub           go to state 58
    expr_mul           go to state 59
    expr_div           go to state 60
    expr_unary         go to state 61
    factor             go to state 62
    unary              go to state 63
    add                go to state 64
    sub                go to state 65
    graph_add          go to state 66
    declaration        go to state 67
    value              go to state 68
    id_or_access       go to state 69
    id                 go to state 70
    type               go to state 23
    number             go to state 71
    number_int         go to state 72
    number_float       go to state 73
    boolean_const      go to state 74


State 32

   23 statement_control: IF . OPEN_P expr_assign CLOSE_P block
   24                  | IF . OPEN_P expr_assign CLOSE_P block ELSE statement_control

    OPEN_P  shift, and go to state 75


State 33

   26 statement: FOR . OPEN_P expr_assign END expr_assign END expr_assign CLOSE_P block
   27          | FOR . OPEN_P id_or_access IT graph_call CLOSE_P block

    OPEN_P  shift, and go to state 76


State 34

   25 statement: WHILE . OPEN_P expr_assign CLOSE_P block

    OPEN_P  shift, and go to state 77


State 35

   92 boolean_const: TRUE .

    $default  reduce using rule 92 (boolean_const)


State 36

   93 boolean_const: FALSE .

    $default  reduce using rule 93 (boolean_const)


State 37

   91 number_float: C_FLOAT .

    $default  reduce using rule 91 (number_float)


State 38

   28 statement: READ . id_or_access END

    ID  shift, and go to state 16

    id_or_access  go to state 78
    id            go to state 79


State 39

   29 statement: WRITE . expr_assign END

    TRUE     shift, and go to state 35
    FALSE    shift, and go to state 36
    ID       shift, and go to state 16
    C_FLOAT  shift, and go to state 37
    C_INT    shift, and go to state 14
    NOT      shift, and go to state 43
    ADD      shift, and go to state 44
    SUB      shift, and go to state 45
    OPEN_P   shift, and go to state 48

    function_call    go to state 49
    expr_assign      go to state 80
    expr_relational  go to state 54
    expr_or          go to state 55
    expr_and         go to state 56
    expr_add         go to state 57
    expr_sub         go to state 58
    expr_mul         go to state 59
    expr_div         go to state 60
    expr_unary       go to state 61
    factor           go to state 62
    unary            go to state 63
    add              go to state 64
    sub              go to state 65
    value            go to state 68
    id_or_access     go to state 69
    id               go to state 70
    number           go to state 71
    number_int       go to state 72
    number_float     go to state 73
    boolean_const    go to state 74


State 40

   71 graph_add: ADDA . OPEN_P id_or_access SEPARATOR expr_assign SEPARATOR expr_assign CLOSE_P

    OPEN_P  shift, and go to state 81


State 41

   70 graph_add: ADDV . OPEN_P id_or_access CLOSE_P

    OPEN_P  shift, and go to state 82


State 42

   33 statement: RETURN . expr_assign END

    TRUE     shift, and go to state 35
    FALSE    shift, and go to state 36
    ID       shift, and go to state 16
    C_FLOAT  shift, and go to state 37
    C_INT    shift, and go to state 14
    NOT      shift, and go to state 43
    ADD      shift, and go to state 44
    SUB      shift, and go to state 45
    OPEN_P   shift, and go to state 48

    function_call    go to state 49
    expr_assign      go to state 83
    expr_relational  go to state 54
    expr_or          go to state 55
    expr_and         go to state 56
    expr_add         go to state 57
    expr_sub         go to state 58
    expr_mul         go to state 59
    expr_div         go to state 60
    expr_unary       go to state 61
    factor           go to state 62
    unary            go to state 63
    add              go to state 64
    sub              go to state 65
    value            go to state 68
    id_or_access     go to state 69
    id               go to state 70
    number           go to state 71
    number_int       go to state 72
    number_float     go to state 73
    boolean_const    go to state 74


State 43

   55 unary: NOT .

    $default  reduce using rule 55 (unary)


State 44

   60 add: ADD .

    $default  reduce using rule 60 (add)


State 45

   61 sub: SUB .

    $default  reduce using rule 61 (sub)


State 46

   21 block: OPEN_BRACE . $@3 statements CLOSE_BRACE

    $default  reduce using rule 20 ($@3)

    $@3  go to state 84


State 47

    6 function: type dimension id $@1 OPEN_P params CLOSE_P $@2 OPEN_BRACE statements CLOSE_BRACE .

    $default  reduce using rule 6 (function)


State 48

   53 factor: OPEN_P . expr_assign CLOSE_P

    TRUE     shift, and go to state 35
    FALSE    shift, and go to state 36
    ID       shift, and go to state 16
    C_FLOAT  shift, and go to state 37
    C_INT    shift, and go to state 14
    NOT      shift, and go to state 43
    ADD      shift, and go to state 44
    SUB      shift, and go to state 45
    OPEN_P   shift, and go to state 48

    function_call    go to state 49
    expr_assign      go to state 85
    expr_relational  go to state 54
    expr_or          go to state 55
    expr_and         go to state 56
    expr_add         go to state 57
    expr_sub         go to state 58
    expr_mul         go to state 59
    expr_div         go to state 60
    expr_unary       go to state 61
    factor           go to state 62
    unary            go to state 63
    add              go to state 64
    sub              go to state 65
    value            go to state 68
    id_or_access     go to state 69
    id               go to state 70
    number           go to state 71
    number_int       go to state 72
    number_float     go to state 73
    boolean_const    go to state 74


State 49

   78 value: function_call .

    $default  reduce using rule 78 (value)


State 50

   22 statement_control: block .

    $default  reduce using rule 22 (statement_control)


State 51

   34 statement: statement_control .

    $default  reduce using rule 34 (statement)


State 52

   19 statements: statements statement .

    $default  reduce using rule 19 (statements)


State 53

   31 statement: expr_assign . END

    END  shift, and go to state 86


State 54

   35 expr_assign: expr_relational . ASSIGN expr_assign
   36            | expr_relational .
   37 expr_relational: expr_relational . compare_op expr_or

    LE       shift, and go to state 87
    GE       shift, and go to state 88
    LESS     shift, and go to state 89
    GREATER  shift, and go to state 90
    EQ       shift, and go to state 91
    NE       shift, and go to state 92
    ASSIGN   shift, and go to state 93

    $default  reduce using rule 36 (expr_assign)

    compare_op  go to state 94


State 55

   38 expr_relational: expr_or .
   39 expr_or: expr_or . or expr_and

    OR  shift, and go to state 95

    $default  reduce using rule 38 (expr_relational)

    or  go to state 96


State 56

   40 expr_or: expr_and .
   41 expr_and: expr_and . and expr_add

    AND  shift, and go to state 97

    $default  reduce using rule 40 (expr_or)

    and  go to state 98


State 57

   42 expr_and: expr_add .
   43 expr_add: expr_add . add expr_sub

    ADD  shift, and go to state 44

    $default  reduce using rule 42 (expr_and)

    add  go to state 99


State 58

   44 expr_add: expr_sub .
   45 expr_sub: expr_sub . sub expr_mul

    SUB  shift, and go to state 45

    $default  reduce using rule 44 (expr_add)

    sub  go to state 100


State 59

   46 expr_sub: expr_mul .
   47 expr_mul: expr_mul . mul expr_div

    MUL  shift, and go to state 101

    $default  reduce using rule 46 (expr_sub)

    mul  go to state 102


State 60

   48 expr_mul: expr_div .
   49 expr_div: expr_div . div expr_unary

    DIV  shift, and go to state 103

    $default  reduce using rule 48 (expr_mul)

    div  go to state 104


State 61

   50 expr_div: expr_unary .

    $default  reduce using rule 50 (expr_div)


State 62

   52 expr_unary: factor .

    $default  reduce using rule 52 (expr_unary)


State 63

   51 expr_unary: unary . factor

    TRUE     shift, and go to state 35
    FALSE    shift, and go to state 36
    ID       shift, and go to state 16
    C_FLOAT  shift, and go to state 37
    C_INT    shift, and go to state 14
    OPEN_P   shift, and go to state 48

    function_call  go to state 49
    factor         go to state 105
    value          go to state 68
    id_or_access   go to state 69
    id             go to state 70
    number         go to state 71
    number_int     go to state 72
    number_float   go to state 73
    boolean_const  go to state 74


State 64

   56 unary: add .

    $default  reduce using rule 56 (unary)


State 65

   57 unary: sub .

    $default  reduce using rule 57 (unary)


State 66

   32 statement: graph_add . END

    END  shift, and go to state 106


State 67

   30 statement: declaration . END

    END  shift, and go to state 107


State 68

   54 factor: value .

    $default  reduce using rule 54 (factor)


State 69

   75 value: id_or_access .

    $default  reduce using rule 75 (value)


State 70

   11 function_call: id . OPEN_P params_call CLOSE_P
   79 id_or_access: id . access_lvl

    OPEN_P        shift, and go to state 108
    OPEN_BRACKET  shift, and go to state 109

    $default  reduce using rule 80 (access_lvl)

    access_lvl  go to state 110


State 71

   76 value: number .

    $default  reduce using rule 76 (value)


State 72

   88 number: number_int .

    $default  reduce using rule 88 (number)


State 73

   89 number: number_float .

    $default  reduce using rule 89 (number)


State 74

   77 value: boolean_const .

    $default  reduce using rule 77 (value)


State 75

   23 statement_control: IF OPEN_P . expr_assign CLOSE_P block
   24                  | IF OPEN_P . expr_assign CLOSE_P block ELSE statement_control

    TRUE     shift, and go to state 35
    FALSE    shift, and go to state 36
    ID       shift, and go to state 16
    C_FLOAT  shift, and go to state 37
    C_INT    shift, and go to state 14
    NOT      shift, and go to state 43
    ADD      shift, and go to state 44
    SUB      shift, and go to state 45
    OPEN_P   shift, and go to state 48

    function_call    go to state 49
    expr_assign      go to state 111
    expr_relational  go to state 54
    expr_or          go to state 55
    expr_and         go to state 56
    expr_add         go to state 57
    expr_sub         go to state 58
    expr_mul         go to state 59
    expr_div         go to state 60
    expr_unary       go to state 61
    factor           go to state 62
    unary            go to state 63
    add              go to state 64
    sub              go to state 65
    value            go to state 68
    id_or_access     go to state 69
    id               go to state 70
    number           go to state 71
    number_int       go to state 72
    number_float     go to state 73
    boolean_const    go to state 74


State 76

   26 statement: FOR OPEN_P . expr_assign END expr_assign END expr_assign CLOSE_P block
   27          | FOR OPEN_P . id_or_access IT graph_call CLOSE_P block

    TRUE     shift, and go to state 35
    FALSE    shift, and go to state 36
    ID       shift, and go to state 16
    C_FLOAT  shift, and go to state 37
    C_INT    shift, and go to state 14
    NOT      shift, and go to state 43
    ADD      shift, and go to state 44
    SUB      shift, and go to state 45
    OPEN_P   shift, and go to state 48

    function_call    go to state 49
    expr_assign      go to state 112
    expr_relational  go to state 54
    expr_or          go to state 55
    expr_and         go to state 56
    expr_add         go to state 57
    expr_sub         go to state 58
    expr_mul         go to state 59
    expr_div         go to state 60
    expr_unary       go to state 61
    factor           go to state 62
    unary            go to state 63
    add              go to state 64
    sub              go to state 65
    value            go to state 68
    id_or_access     go to state 113
    id               go to state 70
    number           go to state 71
    number_int       go to state 72
    number_float     go to state 73
    boolean_const    go to state 74


State 77

   25 statement: WHILE OPEN_P . expr_assign CLOSE_P block

    TRUE     shift, and go to state 35
    FALSE    shift, and go to state 36
    ID       shift, and go to state 16
    C_FLOAT  shift, and go to state 37
    C_INT    shift, and go to state 14
    NOT      shift, and go to state 43
    ADD      shift, and go to state 44
    SUB      shift, and go to state 45
    OPEN_P   shift, and go to state 48

    function_call    go to state 49
    expr_assign      go to state 114
    expr_relational  go to state 54
    expr_or          go to state 55
    expr_and         go to state 56
    expr_add         go to state 57
    expr_sub         go to state 58
    expr_mul         go to state 59
    expr_div         go to state 60
    expr_unary       go to state 61
    factor           go to state 62
    unary            go to state 63
    add              go to state 64
    sub              go to state 65
    value            go to state 68
    id_or_access     go to state 69
    id               go to state 70
    number           go to state 71
    number_int       go to state 72
    number_float     go to state 73
    boolean_const    go to state 74


State 78

   28 statement: READ id_or_access . END

    END  shift, and go to state 115


State 79

   79 id_or_access: id . access_lvl

    OPEN_BRACKET  shift, and go to state 109

    $default  reduce using rule 80 (access_lvl)

    access_lvl  go to state 110


State 80

   29 statement: WRITE expr_assign . END

    END  shift, and go to state 116


State 81

   71 graph_add: ADDA OPEN_P . id_or_access SEPARATOR expr_assign SEPARATOR expr_assign CLOSE_P

    ID  shift, and go to state 16

    id_or_access  go to state 117
    id            go to state 79


State 82

   70 graph_add: ADDV OPEN_P . id_or_access CLOSE_P

    ID  shift, and go to state 16

    id_or_access  go to state 118
    id            go to state 79


State 83

   33 statement: RETURN expr_assign . END

    END  shift, and go to state 119


State 84

   21 block: OPEN_BRACE $@3 . statements CLOSE_BRACE

    $default  reduce using rule 18 (statements)

    statements  go to state 120


State 85

   53 factor: OPEN_P expr_assign . CLOSE_P

    CLOSE_P  shift, and go to state 121


State 86

   31 statement: expr_assign END .

    $default  reduce using rule 31 (statement)


State 87

   64 compare_op: LE .

    $default  reduce using rule 64 (compare_op)


State 88

   65 compare_op: GE .

    $default  reduce using rule 65 (compare_op)


State 89

   66 compare_op: LESS .

    $default  reduce using rule 66 (compare_op)


State 90

   67 compare_op: GREATER .

    $default  reduce using rule 67 (compare_op)


State 91

   68 compare_op: EQ .

    $default  reduce using rule 68 (compare_op)


State 92

   69 compare_op: NE .

    $default  reduce using rule 69 (compare_op)


State 93

   35 expr_assign: expr_relational ASSIGN . expr_assign

    TRUE     shift, and go to state 35
    FALSE    shift, and go to state 36
    ID       shift, and go to state 16
    C_FLOAT  shift, and go to state 37
    C_INT    shift, and go to state 14
    NOT      shift, and go to state 43
    ADD      shift, and go to state 44
    SUB      shift, and go to state 45
    OPEN_P   shift, and go to state 48

    function_call    go to state 49
    expr_assign      go to state 122
    expr_relational  go to state 54
    expr_or          go to state 55
    expr_and         go to state 56
    expr_add         go to state 57
    expr_sub         go to state 58
    expr_mul         go to state 59
    expr_div         go to state 60
    expr_unary       go to state 61
    factor           go to state 62
    unary            go to state 63
    add              go to state 64
    sub              go to state 65
    value            go to state 68
    id_or_access     go to state 69
    id               go to state 70
    number           go to state 71
    number_int       go to state 72
    number_float     go to state 73
    boolean_const    go to state 74


State 94

   37 expr_relational: expr_relational compare_op . expr_or

    TRUE     shift, and go to state 35
    FALSE    shift, and go to state 36
    ID       shift, and go to state 16
    C_FLOAT  shift, and go to state 37
    C_INT    shift, and go to state 14
    NOT      shift, and go to state 43
    ADD      shift, and go to state 44
    SUB      shift, and go to state 45
    OPEN_P   shift, and go to state 48

    function_call  go to state 49
    expr_or        go to state 123
    expr_and       go to state 56
    expr_add       go to state 57
    expr_sub       go to state 58
    expr_mul       go to state 59
    expr_div       go to state 60
    expr_unary     go to state 61
    factor         go to state 62
    unary          go to state 63
    add            go to state 64
    sub            go to state 65
    value          go to state 68
    id_or_access   go to state 69
    id             go to state 70
    number         go to state 71
    number_int     go to state 72
    number_float   go to state 73
    boolean_const  go to state 74


State 95

   59 or: OR .

    $default  reduce using rule 59 (or)


State 96

   39 expr_or: expr_or or . expr_and

    TRUE     shift, and go to state 35
    FALSE    shift, and go to state 36
    ID       shift, and go to state 16
    C_FLOAT  shift, and go to state 37
    C_INT    shift, and go to state 14
    NOT      shift, and go to state 43
    ADD      shift, and go to state 44
    SUB      shift, and go to state 45
    OPEN_P   shift, and go to state 48

    function_call  go to state 49
    expr_and       go to state 124
    expr_add       go to state 57
    expr_sub       go to state 58
    expr_mul       go to state 59
    expr_div       go to state 60
    expr_unary     go to state 61
    factor         go to state 62
    unary          go to state 63
    add            go to state 64
    sub            go to state 65
    value          go to state 68
    id_or_access   go to state 69
    id             go to state 70
    number         go to state 71
    number_int     go to state 72
    number_float   go to state 73
    boolean_const  go to state 74


State 97

   58 and: AND .

    $default  reduce using rule 58 (and)


State 98

   41 expr_and: expr_and and . expr_add

    TRUE     shift, and go to state 35
    FALSE    shift, and go to state 36
    ID       shift, and go to state 16
    C_FLOAT  shift, and go to state 37
    C_INT    shift, and go to state 14
    NOT      shift, and go to state 43
    ADD      shift, and go to state 44
    SUB      shift, and go to state 45
    OPEN_P   shift, and go to state 48

    function_call  go to state 49
    expr_add       go to state 125
    expr_sub       go to state 58
    expr_mul       go to state 59
    expr_div       go to state 60
    expr_unary     go to state 61
    factor         go to state 62
    unary          go to state 63
    add            go to state 64
    sub            go to state 65
    value          go to state 68
    id_or_access   go to state 69
    id             go to state 70
    number         go to state 71
    number_int     go to state 72
    number_float   go to state 73
    boolean_const  go to state 74


State 99

   43 expr_add: expr_add add . expr_sub

    TRUE     shift, and go to state 35
    FALSE    shift, and go to state 36
    ID       shift, and go to state 16
    C_FLOAT  shift, and go to state 37
    C_INT    shift, and go to state 14
    NOT      shift, and go to state 43
    ADD      shift, and go to state 44
    SUB      shift, and go to state 45
    OPEN_P   shift, and go to state 48

    function_call  go to state 49
    expr_sub       go to state 126
    expr_mul       go to state 59
    expr_div       go to state 60
    expr_unary     go to state 61
    factor         go to state 62
    unary          go to state 63
    add            go to state 64
    sub            go to state 65
    value          go to state 68
    id_or_access   go to state 69
    id             go to state 70
    number         go to state 71
    number_int     go to state 72
    number_float   go to state 73
    boolean_const  go to state 74


State 100

   45 expr_sub: expr_sub sub . expr_mul

    TRUE     shift, and go to state 35
    FALSE    shift, and go to state 36
    ID       shift, and go to state 16
    C_FLOAT  shift, and go to state 37
    C_INT    shift, and go to state 14
    NOT      shift, and go to state 43
    ADD      shift, and go to state 44
    SUB      shift, and go to state 45
    OPEN_P   shift, and go to state 48

    function_call  go to state 49
    expr_mul       go to state 127
    expr_div       go to state 60
    expr_unary     go to state 61
    factor         go to state 62
    unary          go to state 63
    add            go to state 64
    sub            go to state 65
    value          go to state 68
    id_or_access   go to state 69
    id             go to state 70
    number         go to state 71
    number_int     go to state 72
    number_float   go to state 73
    boolean_const  go to state 74


State 101

   62 mul: MUL .

    $default  reduce using rule 62 (mul)


State 102

   47 expr_mul: expr_mul mul . expr_div

    TRUE     shift, and go to state 35
    FALSE    shift, and go to state 36
    ID       shift, and go to state 16
    C_FLOAT  shift, and go to state 37
    C_INT    shift, and go to state 14
    NOT      shift, and go to state 43
    ADD      shift, and go to state 44
    SUB      shift, and go to state 45
    OPEN_P   shift, and go to state 48

    function_call  go to state 49
    expr_div       go to state 128
    expr_unary     go to state 61
    factor         go to state 62
    unary          go to state 63
    add            go to state 64
    sub            go to state 65
    value          go to state 68
    id_or_access   go to state 69
    id             go to state 70
    number         go to state 71
    number_int     go to state 72
    number_float   go to state 73
    boolean_const  go to state 74


State 103

   63 div: DIV .

    $default  reduce using rule 63 (div)


State 104

   49 expr_div: expr_div div . expr_unary

    TRUE     shift, and go to state 35
    FALSE    shift, and go to state 36
    ID       shift, and go to state 16
    C_FLOAT  shift, and go to state 37
    C_INT    shift, and go to state 14
    NOT      shift, and go to state 43
    ADD      shift, and go to state 44
    SUB      shift, and go to state 45
    OPEN_P   shift, and go to state 48

    function_call  go to state 49
    expr_unary     go to state 129
    factor         go to state 62
    unary          go to state 63
    add            go to state 64
    sub            go to state 65
    value          go to state 68
    id_or_access   go to state 69
    id             go to state 70
    number         go to state 71
    number_int     go to state 72
    number_float   go to state 73
    boolean_const  go to state 74


State 105

   51 expr_unary: unary factor .

    $default  reduce using rule 51 (expr_unary)


State 106

   32 statement: graph_add END .

    $default  reduce using rule 32 (statement)


State 107

   30 statement: declaration END .

    $default  reduce using rule 30 (statement)


State 108

   11 function_call: id OPEN_P . params_call CLOSE_P

    TRUE     shift, and go to state 35
    FALSE    shift, and go to state 36
    ID       shift, and go to state 16
    C_FLOAT  shift, and go to state 37
    C_INT    shift, and go to state 14
    NOT      shift, and go to state 43
    ADD      shift, and go to state 44
    SUB      shift, and go to state 45
    OPEN_P   shift, and go to state 48

    $default  reduce using rule 12 (params_call)

    function_call    go to state 49
    params_call      go to state 130
    expr_assign      go to state 131
    expr_relational  go to state 54
    expr_or          go to state 55
    expr_and         go to state 56
    expr_add         go to state 57
    expr_sub         go to state 58
    expr_mul         go to state 59
    expr_div         go to state 60
    expr_unary       go to state 61
    factor           go to state 62
    unary            go to state 63
    add              go to state 64
    sub              go to state 65
    value            go to state 68
    id_or_access     go to state 69
    id               go to state 70
    number           go to state 71
    number_int       go to state 72
    number_float     go to state 73
    boolean_const    go to state 74


State 109

   81 access_lvl: OPEN_BRACKET . expr_assign CLOSE_BRACKET access_lvl

    TRUE     shift, and go to state 35
    FALSE    shift, and go to state 36
    ID       shift, and go to state 16
    C_FLOAT  shift, and go to state 37
    C_INT    shift, and go to state 14
    NOT      shift, and go to state 43
    ADD      shift, and go to state 44
    SUB      shift, and go to state 45
    OPEN_P   shift, and go to state 48

    function_call    go to state 49
    expr_assign      go to state 132
    expr_relational  go to state 54
    expr_or          go to state 55
    expr_and         go to state 56
    expr_add         go to state 57
    expr_sub         go to state 58
    expr_mul         go to state 59
    expr_div         go to state 60
    expr_unary       go to state 61
    factor           go to state 62
    unary            go to state 63
    add              go to state 64
    sub              go to state 65
    value            go to state 68
    id_or_access     go to state 69
    id               go to state 70
    number           go to state 71
    number_int       go to state 72
    number_float     go to state 73
    boolean_const    go to state 74


State 110

   79 id_or_access: id access_lvl .

    $default  reduce using rule 79 (id_or_access)


State 111

   23 statement_control: IF OPEN_P expr_assign . CLOSE_P block
   24                  | IF OPEN_P expr_assign . CLOSE_P block ELSE statement_control

    CLOSE_P  shift, and go to state 133


State 112

   26 statement: FOR OPEN_P expr_assign . END expr_assign END expr_assign CLOSE_P block

    END  shift, and go to state 134


State 113

   27 statement: FOR OPEN_P id_or_access . IT graph_call CLOSE_P block
   75 value: id_or_access .

    IT  shift, and go to state 135

    $default  reduce using rule 75 (value)


State 114

   25 statement: WHILE OPEN_P expr_assign . CLOSE_P block

    CLOSE_P  shift, and go to state 136


State 115

   28 statement: READ id_or_access END .

    $default  reduce using rule 28 (statement)


State 116

   29 statement: WRITE expr_assign END .

    $default  reduce using rule 29 (statement)


State 117

   71 graph_add: ADDA OPEN_P id_or_access . SEPARATOR expr_assign SEPARATOR expr_assign CLOSE_P

    SEPARATOR  shift, and go to state 137


State 118

   70 graph_add: ADDV OPEN_P id_or_access . CLOSE_P

    CLOSE_P  shift, and go to state 138


State 119

   33 statement: RETURN expr_assign END .

    $default  reduce using rule 33 (statement)


State 120

   19 statements: statements . statement
   21 block: OPEN_BRACE $@3 statements . CLOSE_BRACE

    IF           shift, and go to state 32
    FOR          shift, and go to state 33
    WHILE        shift, and go to state 34
    BOOLEAN      shift, and go to state 5
    INT          shift, and go to state 6
    FLOAT        shift, and go to state 7
    GRAPH        shift, and go to state 8
    VOID         shift, and go to state 9
    TRUE         shift, and go to state 35
    FALSE        shift, and go to state 36
    ID           shift, and go to state 16
    C_FLOAT      shift, and go to state 37
    C_INT        shift, and go to state 14
    READ         shift, and go to state 38
    WRITE        shift, and go to state 39
    ADDA         shift, and go to state 40
    ADDV         shift, and go to state 41
    RETURN       shift, and go to state 42
    NOT          shift, and go to state 43
    ADD          shift, and go to state 44
    SUB          shift, and go to state 45
    OPEN_BRACE   shift, and go to state 46
    CLOSE_BRACE  shift, and go to state 139
    OPEN_P       shift, and go to state 48

    function_call      go to state 49
    block              go to state 50
    statement_control  go to state 51
    statement          go to state 52
    expr_assign        go to state 53
    expr_relational    go to state 54
    expr_or            go to state 55
    expr_and           go to state 56
    expr_add           go to state 57
    expr_sub           go to state 58
    expr_mul           go to state 59
    expr_div           go to state 60
    expr_unary         go to state 61
    factor             go to state 62
    unary              go to state 63
    add                go to state 64
    sub                go to state 65
    graph_add          go to state 66
    declaration        go to state 67
    value              go to state 68
    id_or_access       go to state 69
    id                 go to state 70
    type               go to state 23
    number             go to state 71
    number_int         go to state 72
    number_float       go to state 73
    boolean_const      go to state 74


State 121

   53 factor: OPEN_P expr_assign CLOSE_P .

    $default  reduce using rule 53 (factor)


State 122

   35 expr_assign: expr_relational ASSIGN expr_assign .

    $default  reduce using rule 35 (expr_assign)


State 123

   37 expr_relational: expr_relational compare_op expr_or .
   39 expr_or: expr_or . or expr_and

    OR  shift, and go to state 95

    $default  reduce using rule 37 (expr_relational)

    or  go to state 96


State 124

   39 expr_or: expr_or or expr_and .
   41 expr_and: expr_and . and expr_add

    AND  shift, and go to state 97

    $default  reduce using rule 39 (expr_or)

    and  go to state 98


State 125

   41 expr_and: expr_and and expr_add .
   43 expr_add: expr_add . add expr_sub

    ADD  shift, and go to state 44

    $default  reduce using rule 41 (expr_and)

    add  go to state 99


State 126

   43 expr_add: expr_add add expr_sub .
   45 expr_sub: expr_sub . sub expr_mul

    SUB  shift, and go to state 45

    $default  reduce using rule 43 (expr_add)

    sub  go to state 100


State 127

   45 expr_sub: expr_sub sub expr_mul .
   47 expr_mul: expr_mul . mul expr_div

    MUL  shift, and go to state 101

    $default  reduce using rule 45 (expr_sub)

    mul  go to state 102


State 128

   47 expr_mul: expr_mul mul expr_div .
   49 expr_div: expr_div . div expr_unary

    DIV  shift, and go to state 103

    $default  reduce using rule 47 (expr_mul)

    div  go to state 104


State 129

   49 expr_div: expr_div div expr_unary .

    $default  reduce using rule 49 (expr_div)


State 130

   11 function_call: id OPEN_P params_call . CLOSE_P
   13 params_call: params_call . SEPARATOR expr_assign

    SEPARATOR  shift, and go to state 140
    CLOSE_P    shift, and go to state 141


State 131

   14 params_call: expr_assign .

    $default  reduce using rule 14 (params_call)


State 132

   81 access_lvl: OPEN_BRACKET expr_assign . CLOSE_BRACKET access_lvl

    CLOSE_BRACKET  shift, and go to state 142


State 133

   23 statement_control: IF OPEN_P expr_assign CLOSE_P . block
   24                  | IF OPEN_P expr_assign CLOSE_P . block ELSE statement_control

    OPEN_BRACE  shift, and go to state 46

    block  go to state 143


State 134

   26 statement: FOR OPEN_P expr_assign END . expr_assign END expr_assign CLOSE_P block

    TRUE     shift, and go to state 35
    FALSE    shift, and go to state 36
    ID       shift, and go to state 16
    C_FLOAT  shift, and go to state 37
    C_INT    shift, and go to state 14
    NOT      shift, and go to state 43
    ADD      shift, and go to state 44
    SUB      shift, and go to state 45
    OPEN_P   shift, and go to state 48

    function_call    go to state 49
    expr_assign      go to state 144
    expr_relational  go to state 54
    expr_or          go to state 55
    expr_and         go to state 56
    expr_add         go to state 57
    expr_sub         go to state 58
    expr_mul         go to state 59
    expr_div         go to state 60
    expr_unary       go to state 61
    factor           go to state 62
    unary            go to state 63
    add              go to state 64
    sub              go to state 65
    value            go to state 68
    id_or_access     go to state 69
    id               go to state 70
    number           go to state 71
    number_int       go to state 72
    number_float     go to state 73
    boolean_const    go to state 74


State 135

   27 statement: FOR OPEN_P id_or_access IT . graph_call CLOSE_P block

    DFS  shift, and go to state 145
    BFS  shift, and go to state 146

    graph_call  go to state 147


State 136

   25 statement: WHILE OPEN_P expr_assign CLOSE_P . block

    OPEN_BRACE  shift, and go to state 46

    block  go to state 148


State 137

   71 graph_add: ADDA OPEN_P id_or_access SEPARATOR . expr_assign SEPARATOR expr_assign CLOSE_P

    TRUE     shift, and go to state 35
    FALSE    shift, and go to state 36
    ID       shift, and go to state 16
    C_FLOAT  shift, and go to state 37
    C_INT    shift, and go to state 14
    NOT      shift, and go to state 43
    ADD      shift, and go to state 44
    SUB      shift, and go to state 45
    OPEN_P   shift, and go to state 48

    function_call    go to state 49
    expr_assign      go to state 149
    expr_relational  go to state 54
    expr_or          go to state 55
    expr_and         go to state 56
    expr_add         go to state 57
    expr_sub         go to state 58
    expr_mul         go to state 59
    expr_div         go to state 60
    expr_unary       go to state 61
    factor           go to state 62
    unary            go to state 63
    add              go to state 64
    sub              go to state 65
    value            go to state 68
    id_or_access     go to state 69
    id               go to state 70
    number           go to state 71
    number_int       go to state 72
    number_float     go to state 73
    boolean_const    go to state 74


State 138

   70 graph_add: ADDV OPEN_P id_or_access CLOSE_P .

    $default  reduce using rule 70 (graph_add)


State 139

   21 block: OPEN_BRACE $@3 statements CLOSE_BRACE .

    $default  reduce using rule 21 (block)


State 140

   13 params_call: params_call SEPARATOR . expr_assign

    TRUE     shift, and go to state 35
    FALSE    shift, and go to state 36
    ID       shift, and go to state 16
    C_FLOAT  shift, and go to state 37
    C_INT    shift, and go to state 14
    NOT      shift, and go to state 43
    ADD      shift, and go to state 44
    SUB      shift, and go to state 45
    OPEN_P   shift, and go to state 48

    function_call    go to state 49
    expr_assign      go to state 150
    expr_relational  go to state 54
    expr_or          go to state 55
    expr_and         go to state 56
    expr_add         go to state 57
    expr_sub         go to state 58
    expr_mul         go to state 59
    expr_div         go to state 60
    expr_unary       go to state 61
    factor           go to state 62
    unary            go to state 63
    add              go to state 64
    sub              go to state 65
    value            go to state 68
    id_or_access     go to state 69
    id               go to state 70
    number           go to state 71
    number_int       go to state 72
    number_float     go to state 73
    boolean_const    go to state 74


State 141

   11 function_call: id OPEN_P params_call CLOSE_P .

    $default  reduce using rule 11 (function_call)


State 142

   81 access_lvl: OPEN_BRACKET expr_assign CLOSE_BRACKET . access_lvl

    OPEN_BRACKET  shift, and go to state 109

    $default  reduce using rule 80 (access_lvl)

    access_lvl  go to state 151


State 143

   23 statement_control: IF OPEN_P expr_assign CLOSE_P block .
   24                  | IF OPEN_P expr_assign CLOSE_P block . ELSE statement_control

    ELSE  shift, and go to state 152

    $default  reduce using rule 23 (statement_control)


State 144

   26 statement: FOR OPEN_P expr_assign END expr_assign . END expr_assign CLOSE_P block

    END  shift, and go to state 153


State 145

   15 graph_call: DFS . graph_params_call

    OPEN_P  shift, and go to state 154

    graph_params_call  go to state 155


State 146

   16 graph_call: BFS . graph_params_call

    OPEN_P  shift, and go to state 154

    graph_params_call  go to state 156


State 147

   27 statement: FOR OPEN_P id_or_access IT graph_call . CLOSE_P block

    CLOSE_P  shift, and go to state 157


State 148

   25 statement: WHILE OPEN_P expr_assign CLOSE_P block .

    $default  reduce using rule 25 (statement)


State 149

   71 graph_add: ADDA OPEN_P id_or_access SEPARATOR expr_assign . SEPARATOR expr_assign CLOSE_P

    SEPARATOR  shift, and go to state 158


State 150

   13 params_call: params_call SEPARATOR expr_assign .

    $default  reduce using rule 13 (params_call)


State 151

   81 access_lvl: OPEN_BRACKET expr_assign CLOSE_BRACKET access_lvl .

    $default  reduce using rule 81 (access_lvl)


State 152

   24 statement_control: IF OPEN_P expr_assign CLOSE_P block ELSE . statement_control

    IF          shift, and go to state 32
    OPEN_BRACE  shift, and go to state 46

    block              go to state 50
    statement_control  go to state 159


State 153

   26 statement: FOR OPEN_P expr_assign END expr_assign END . expr_assign CLOSE_P block

    TRUE     shift, and go to state 35
    FALSE    shift, and go to state 36
    ID       shift, and go to state 16
    C_FLOAT  shift, and go to state 37
    C_INT    shift, and go to state 14
    NOT      shift, and go to state 43
    ADD      shift, and go to state 44
    SUB      shift, and go to state 45
    OPEN_P   shift, and go to state 48

    function_call    go to state 49
    expr_assign      go to state 160
    expr_relational  go to state 54
    expr_or          go to state 55
    expr_and         go to state 56
    expr_add         go to state 57
    expr_sub         go to state 58
    expr_mul         go to state 59
    expr_div         go to state 60
    expr_unary       go to state 61
    factor           go to state 62
    unary            go to state 63
    add              go to state 64
    sub              go to state 65
    value            go to state 68
    id_or_access     go to state 69
    id               go to state 70
    number           go to state 71
    number_int       go to state 72
    number_float     go to state 73
    boolean_const    go to state 74


State 154

   17 graph_params_call: OPEN_P . id_or_access SEPARATOR expr_assign SEPARATOR expr_assign CLOSE_P

    ID  shift, and go to state 16

    id_or_access  go to state 161
    id            go to state 79


State 155

   15 graph_call: DFS graph_params_call .

    $default  reduce using rule 15 (graph_call)


State 156

   16 graph_call: BFS graph_params_call .

    $default  reduce using rule 16 (graph_call)


State 157

   27 statement: FOR OPEN_P id_or_access IT graph_call CLOSE_P . block

    OPEN_BRACE  shift, and go to state 46

    block  go to state 162


State 158

   71 graph_add: ADDA OPEN_P id_or_access SEPARATOR expr_assign SEPARATOR . expr_assign CLOSE_P

    TRUE     shift, and go to state 35
    FALSE    shift, and go to state 36
    ID       shift, and go to state 16
    C_FLOAT  shift, and go to state 37
    C_INT    shift, and go to state 14
    NOT      shift, and go to state 43
    ADD      shift, and go to state 44
    SUB      shift, and go to state 45
    OPEN_P   shift, and go to state 48

    function_call    go to state 49
    expr_assign      go to state 163
    expr_relational  go to state 54
    expr_or          go to state 55
    expr_and         go to state 56
    expr_add         go to state 57
    expr_sub         go to state 58
    expr_mul         go to state 59
    expr_div         go to state 60
    expr_unary       go to state 61
    factor           go to state 62
    unary            go to state 63
    add              go to state 64
    sub              go to state 65
    value            go to state 68
    id_or_access     go to state 69
    id               go to state 70
    number           go to state 71
    number_int       go to state 72
    number_float     go to state 73
    boolean_const    go to state 74


State 159

   24 statement_control: IF OPEN_P expr_assign CLOSE_P block ELSE statement_control .

    $default  reduce using rule 24 (statement_control)


State 160

   26 statement: FOR OPEN_P expr_assign END expr_assign END expr_assign . CLOSE_P block

    CLOSE_P  shift, and go to state 164


State 161

   17 graph_params_call: OPEN_P id_or_access . SEPARATOR expr_assign SEPARATOR expr_assign CLOSE_P

    SEPARATOR  shift, and go to state 165


State 162

   27 statement: FOR OPEN_P id_or_access IT graph_call CLOSE_P block .

    $default  reduce using rule 27 (statement)


State 163

   71 graph_add: ADDA OPEN_P id_or_access SEPARATOR expr_assign SEPARATOR expr_assign . CLOSE_P

    CLOSE_P  shift, and go to state 166


State 164

   26 statement: FOR OPEN_P expr_assign END expr_assign END expr_assign CLOSE_P . block

    OPEN_BRACE  shift, and go to state 46

    block  go to state 167


State 165

   17 graph_params_call: OPEN_P id_or_access SEPARATOR . expr_assign SEPARATOR expr_assign CLOSE_P

    TRUE     shift, and go to state 35
    FALSE    shift, and go to state 36
    ID       shift, and go to state 16
    C_FLOAT  shift, and go to state 37
    C_INT    shift, and go to state 14
    NOT      shift, and go to state 43
    ADD      shift, and go to state 44
    SUB      shift, and go to state 45
    OPEN_P   shift, and go to state 48

    function_call    go to state 49
    expr_assign      go to state 168
    expr_relational  go to state 54
    expr_or          go to state 55
    expr_and         go to state 56
    expr_add         go to state 57
    expr_sub         go to state 58
    expr_mul         go to state 59
    expr_div         go to state 60
    expr_unary       go to state 61
    factor           go to state 62
    unary            go to state 63
    add              go to state 64
    sub              go to state 65
    value            go to state 68
    id_or_access     go to state 69
    id               go to state 70
    number           go to state 71
    number_int       go to state 72
    number_float     go to state 73
    boolean_const    go to state 74


State 166

   71 graph_add: ADDA OPEN_P id_or_access SEPARATOR expr_assign SEPARATOR expr_assign CLOSE_P .

    $default  reduce using rule 71 (graph_add)


State 167

   26 statement: FOR OPEN_P expr_assign END expr_assign END expr_assign CLOSE_P block .

    $default  reduce using rule 26 (statement)


State 168

   17 graph_params_call: OPEN_P id_or_access SEPARATOR expr_assign . SEPARATOR expr_assign CLOSE_P

    SEPARATOR  shift, and go to state 169


State 169

   17 graph_params_call: OPEN_P id_or_access SEPARATOR expr_assign SEPARATOR . expr_assign CLOSE_P

    TRUE     shift, and go to state 35
    FALSE    shift, and go to state 36
    ID       shift, and go to state 16
    C_FLOAT  shift, and go to state 37
    C_INT    shift, and go to state 14
    NOT      shift, and go to state 43
    ADD      shift, and go to state 44
    SUB      shift, and go to state 45
    OPEN_P   shift, and go to state 48

    function_call    go to state 49
    expr_assign      go to state 170
    expr_relational  go to state 54
    expr_or          go to state 55
    expr_and         go to state 56
    expr_add         go to state 57
    expr_sub         go to state 58
    expr_mul         go to state 59
    expr_div         go to state 60
    expr_unary       go to state 61
    factor           go to state 62
    unary            go to state 63
    add              go to state 64
    sub              go to state 65
    value            go to state 68
    id_or_access     go to state 69
    id               go to state 70
    number           go to state 71
    number_int       go to state 72
    number_float     go to state 73
    boolean_const    go to state 74


State 170

   17 graph_params_call: OPEN_P id_or_access SEPARATOR expr_assign SEPARATOR expr_assign . CLOSE_P

    CLOSE_P  shift, and go to state 171


State 171

   17 graph_params_call: OPEN_P id_or_access SEPARATOR expr_assign SEPARATOR expr_assign CLOSE_P .

    $default  reduce using rule 17 (graph_params_call)
