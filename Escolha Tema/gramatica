program -> program function | ε

function -> type id ( opt_params ) { statements }

type -> 'boolean' | 'int' | 'float' | 'void' | 'graph' '[' number_int ']'

opt_params -> ε | params
params -> params , declaration | declaration

statements -> ε | statements statement
statement -> declaration_and_atrib ';'
           | expr_decl ';' 
           | 'for' '(' declaration_and_atrib  ';' expr_decl ';' expr_decl ')' 
           | 'for' '(' declaration  ':' graph_op ')' 
           | 'while' '(' expr_decl ')' statement 
           | 'if' '(' expr_decl ')' statement
           | 'return' expr_decl ';'
           | '>>' value ';'
           | '<<' value ';'
           | id '.' function_call ';'
           | '{' statements '}'

graph_op -> 'dfs' '(' id ',' id ')' | 'bfs' '(' id ',' id ')' 

declaration_and_atrib -> declaration | delaration '=' expr_decl
declaration -> type id

compare_op -> '<' | '<=' | '>=' | '=='
add_op -> '*' | '/'
mul_op -> '+' | '-'

expr_decl  -> id '=' expr_relational | expr_relational
expr_relational -> expr_relational compare_op expr_and | expr_and
expr_and -> expr_and '&&' expr_or | expr_or
expr_or -> expr_or '||' expr_add | expr_add
expr_add -> expr_add add_op expr_mult | expr_mult
expr_mult -> expr_mult mul_op factor | factor 

factor -> '(' expr_decl ')' 
        | function_call
        | value

function_call -> id '(' opt_params_call ')'
opt_params_call -> ε | params_call
params_call -> params_call , value | value

value -> id | number 

number -> number_int | number_list '.' digit number_list
number_int -> digit number_list
number_list -> number_list digit | ε 
digit -> [0-9]

id -> letter letter_list number_list
letter_list -> letter_list letter | ε 
letter -> [a-bA-B]

//number -> [0-9][0-9]* | [0-9]*'.'[0-9]*
//id -> [a-bA-B][a-bA-B]*[0-9]*

/*--------------*/

- Duvida
    - Devo definir espaços em branco
    - Definir como BNF?

- Semantica
    - Parametros passados por copia
    - main sera a funcao inicial a partir de qual o programa sera rodado, falta de main implica em nao execucao
    - apenas existe cast implicito entre int e float
    - expressoes de atribuição retornam o valor da variavel sendo atribuida
    - apenas grafos podem obter declaracao e acesso <id> '[' <number> ']'
